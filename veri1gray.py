# -*- coding: utf-8 -*-
"""VERI1GRAY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rj-K0nrzO8N2WBfKAjspmigtP-fTcHyx
"""

import numpy as np
from skimage import io
import cv2
import matplotlib.pyplot as plt
import sys
import os
from keras.preprocessing import image
from skimage.color import rgb2gray
from PIL import Image

img = cv2.imread("gray.bmp")


img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)



print(img.shape)

trs_img = np.transpose(img)

# print(trs_img.shape)

# 32308 BYTES

def encode(s):
 
    encoding_row = [] 
    i = 0
    while i < len(s):
        # count occurrences of character at index `i`
        count = 1
 
        while i + 1 < len(s) and s[i] == s[i + 1]:

            count = count + 1
            i = i + 1
 
        # append current character and its count to the result
        if count > 1:
            encoding_row.append(255)
            encoding_row.append(count)
            encoding_row.append(s[i])
            i = i + 1
        else :
            encoding_row.append(s[i])
            i = i + 1
 
    return encoding_row

def compress(a):
  encoding_column = []
  cnt = 0
  for x in range(len(a)):
    new_row = encode(a[x])
    cnt = cnt + len(new_row)
    encoding_column.append(new_row)
    new_row = []


  y=np.array([np.array(xi) for xi in encoding_column])

  return print(cnt, " bytes","\n")

compress(img)
# 95.3 per cent compression rate row by row

compress(trs_img)
# 94.3 per cent compression rate column by column

"""# COMPRESSING BY ZIGZAG"""

rows = img.shape[0]
columns = img.shape[1]

print(rows)
print(columns)

solution = [[] for i in range(0, (rows+columns)-1)]

for i in range(rows):
  for j in range(columns):
    summ = i + j
    if summ % 2 == 0:
      solution[summ].insert(0, img[i][j])
    else:
      solution[summ].append(img[i][j])


compress(solution)
# 90.9 per cent compression zigzag