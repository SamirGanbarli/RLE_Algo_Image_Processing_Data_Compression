# -*- coding: utf-8 -*-
"""VERI1BW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lWS-mYi5512zGtgyQfHQ3darDFJdelHe
"""

import numpy as np
from skimage import io
import cv2
import matplotlib.pyplot as plt
import sys
import os
from keras.preprocessing import image
from skimage.color import rgb2gray
from PIL import Image

def show(img, figsize=(6, 6), title="Image"):
    figure=plt.figure(figsize=figsize)
    
    plt.imshow(img)
    plt.show()

img = cv2.imread("tekrenk.bmp")
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
c=0

for x in range(len(img)):
  for y in range(len(img[x])):
    if img[x][y] == 0:
      img[x][y] = 1
      c+=1
    elif img[x][y] == 255:
      img[x][y] = 0
      c+=1

trs_img = np.transpose(img)

img.shape


# 41881 bit not compressed

def encode(s):
 
    encoding_row = [] 
    i = 0
    while i < len(s):
        # count occurrences of character at index `i`
        count = 1
 
        while i + 1 < len(s) and s[i] == s[i + 1]:

            count = count + 1
            i = i + 1
 
        # append current character and its count to the result
        if count >= 1:
            encoding_row.append(count)
            # encoding_row.append(s[i])
            i = i + 1
        

    if s[0] == 1:
     encoding_row = [0, *encoding_row]
    
    return encoding_row

def compress(a):
  encoding_column = []
  cnt = 0
  for x in range(len(a)):
    new_row = encode(a[x])
    cnt = cnt + len(new_row)
    encoding_column.append(new_row)
    new_row = []


  y=np.array([np.array(xi) for xi in encoding_column])

  return print(cnt, " bytes","\n", y)

arr = np.array([
                [0,0,0,1,1,1,1,1,0,0,0,1],
                [1,1,1,1,0,0,0,0,0,1,0,1],
                [0,1,1,0,0,1,0,1,0,0,0,1],
                [1,1,0,0,0,0,0,1,0,0,0,1]
])
compress(img)
#ROW BY ROW 98.7 PER CENT COMPRESSION RATE

compress(trs_img)
#98.6 per cent compression rate

"""# COMPRESSING BW BY ZIGZAG SCANNING"""

rows = img.shape[0]
columns = img.shape[1]

print(rows)
print(columns)

solution = [[] for i in range(0, (rows+columns)-1)]

for i in range(rows):
  for j in range(columns):
    summ = i + j
    if summ % 2 == 0:
      solution[summ].insert(0, img[i][j])
    else:
      solution[summ].append(img[i][j])


compress(solution)

#97.4 PER CENT COMPRESSION